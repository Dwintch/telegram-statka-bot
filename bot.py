import asyncio
import os
import re
from collections import defaultdict, Counter, deque
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
TOPIC_ID = int(os.getenv("TOPIC_ID"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# –ö–æ–Ω—Ñ–∏–≥–∏
SHOP_NAMES = ["—Ö–∞–π–ø", "—è–Ω—Ç–∞—Ä—å", "–ø–æ–ª–∫–∞"]
KEYWORDS = ["–º–∞–ª–æ", "–Ω–µ—Ç—É", "–Ω–µ—Ç", "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è", "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å"]

STATE_COLORS = {
    "–º–∞–ª–æ": "‚ö†Ô∏è",
    "–Ω–µ—Ç—É": "‚ùå",
    "–Ω–µ—Ç": "‚ùå",
    "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è": "‚ùå",
    "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å": "‚ùå",
    "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å": "‚ùå"
}

SYNONYMS = {
    "–Ω–µ—Ç": "–Ω–µ—Ç—É",
    "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å": "–Ω–µ—Ç—É",
    "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è": "–Ω–µ—Ç—É",
    "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å": "–Ω–µ—Ç—É"
}

def normalize_state(state):
    return SYNONYMS.get(state, state)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –º–∞–≥–∞–∑–∏–Ω -> Counter((–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ) -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
stats = defaultdict(Counter)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–º–µ, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
# –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: deque –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (–ª–∏–º–∏—Ç 5)
user_messages = defaultdict(lambda: deque(maxlen=5))

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥. —Å–æ–æ–±—â–µ–Ω–∏–µ–º
# –ö–ª—é—á: message_id –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ True (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)
photo_reply_map = {}

async def analyze_messages_with_ai(texts: list[str]) -> list[tuple[str, str]]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–≤–∞—Ä).
    """

    prompt = (
        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—Ö–≤–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º.\n"
        "–ú–∞–≥–∞–∑–∏–Ω—ã: —Ö–∞–π–ø, —è–Ω—Ç–∞—Ä—å, –ø–æ–ª–∫–∞.\n"
        "–°–æ—Å—Ç–æ—è–Ω–∏—è: –º–∞–ª–æ, –Ω–µ—Ç—É.\n"
        "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        "–•–∞–π–ø –º–∞–ª–æ –ª–∞–±—É–±—É —ç–Ω–µ—Ä–¥–∂–∏\n"
        "–í –ø–æ–ª–∫–µ –Ω–µ—Ç—É —Å—Ç–∏—á–µ–π\n"
        "–í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä\n"
        "–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        + "\n".join(texts) +
        "\n\n–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ –æ–¥–Ω–æ–π –ø–∞—Ä–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É."
    )

    try:
        response = await asyncio.to_thread(
            lambda: openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0,
                max_tokens=150,
            )
        )
        result_text = response.choices[0].message.content.strip()
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        pairs = []
        for line in result_text.split('\n'):
            parts = line.strip().split(maxsplit=1)
            if len(parts) == 2:
                state, item = parts
                state = normalize_state(state.lower())
                pairs.append((state, item.strip()))
        return pairs
    except Exception as e:
        print("OpenAI API error:", e)
        return []

def update_stats(shop: str, pairs: list[tuple[str, str]]):
    for state, item in pairs:
        stats[shop][(item, state)] += 1

def find_shop_in_text(text: str) -> str | None:
    text_lower = text.lower()
    for shop in SHOP_NAMES:
        if shop in text_lower:
            return shop
    return None

@dp.message(F.is_topic_message & (F.chat.id == GROUP_CHAT_ID) & (F.message_thread_id == TOPIC_ID))
async def handle_topic_message(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_messages[message.from_user.id].append(message.text or "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –¥–∞ ‚Äî —Å–≤—è–∑—ã–≤–∞–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º
    if message.reply_to_message and message.content_type == ContentType.PHOTO:
        photo_reply_map[message.reply_to_message.message_id] = True

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if not message.text:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    shop = find_shop_in_text(message.text)
    if not shop:
        return

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_texts = list(user_messages[message.from_user.id])

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
    pairs = await analyze_messages_with_ai(recent_texts)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —Å –ø–æ–º–µ—Ç–∫–æ–π "–Ω–µ—Ç", –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    if message.message_id in photo_reply_map:
        # –¥–æ–±–∞–≤–ª—è–µ–º "–Ω–µ—Ç—É" –¥–ª—è –≤—Å–µ–≥–æ —á—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for state, item in pairs:
            if state != "–Ω–µ—Ç—É":
                pairs.append(("–Ω–µ—Ç—É", item))

    if pairs:
        update_stats(shop, pairs)
        print(f"Updated stats for {shop}: {pairs}")

@dp.message(F.text.startswith("/—Å—Ç–∞—Ç–∫–∞"))
async def cmd_statka(message: Message):
    text = await format_stat()
    await message.reply(text)

async def format_stat():
    if not stats:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    lines = [f"üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∫–∞ –Ω–∞ {datetime.now().strftime('%d.%m %H:%M')}</b>\n"]
    for shop, counter in stats.items():
        lines.append(f"<u>{shop.capitalize()}</u>:")
        for (item, state), count in counter.most_common():
            icon = STATE_COLORS.get(state, "")
            lines.append(f"{icon} <b>{item}</b> ‚Äî {state} ({count})")
        lines.append("")
    return "\n".join(lines)

async def send_daily_stat():
    text = await format_stat()
    await bot.send_message(chat_id=GROUP_CHAT_ID, message_thread_id=TOPIC_ID, text=text)

def setup_scheduler():
    scheduler.add_job(send_daily_stat, "cron", hour=0, minute=0)
    scheduler.start()

async def main():
    setup_scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())
