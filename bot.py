import os
import re
import json
from collections import defaultdict, Counter
from datetime import datetime

import asyncio
from aiohttp import web

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from apscheduler.schedulers.asyncio import AsyncIOScheduler

import openai
from openai import AsyncOpenAI

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
TOPIC_ID = int(os.getenv("TOPIC_ID"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä https://yourdomain.com/webhook

if not all([BOT_TOKEN, GROUP_CHAT_ID, TOPIC_ID, OPENAI_API_KEY, WEBHOOK_URL]):
    raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, GROUP_CHAT_ID, TOPIC_ID, OPENAI_API_KEY, WEBHOOK_URL) –∑–∞–¥–∞–Ω—ã!")

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
scheduler = AsyncIOScheduler()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–µ—à —Å–æ–æ–±—â–µ–Ω–∏–π ---
stats = defaultdict(Counter)  # stats[shop][(item,state)] = count
recent_user_msgs = defaultdict(list)  # user_id -> list[str]

SHOP_NAMES = ["—Ö–∞–π–ø", "—è–Ω—Ç–∞—Ä—å", "–ø–æ–ª–∫–∞"]
KEYWORDS = ["–º–∞–ª–æ", "–Ω–µ—Ç—É", "–Ω–µ—Ç", "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è", "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å"]

STATE_COLORS = {
    "–º–∞–ª–æ": "\u26A0\ufe0f",
    "–Ω–µ—Ç—É": "\u274C",
    "–Ω–µ—Ç": "\u274C",
    "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è": "\u274C",
    "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å": "\u274C",
    "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å": "\u274C"
}

SYNONYMS = {
    "–Ω–µ—Ç": "–Ω–µ—Ç—É",
    "–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å": "–Ω–µ—Ç—É",
    "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è": "–Ω–µ—Ç—É",
    "–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å": "–Ω–µ—Ç—É"
}

def normalize_state(state):
    return SYNONYMS.get(state, state)

def extract_data(text: str):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–∞–≥–∞–∑–∏–Ω –∏ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º"""
    found_shop = None
    text_lower = text.lower()
    for shop in SHOP_NAMES:
        if shop in text_lower:
            found_shop = shop
            break
    if not found_shop:
        return None

    results = []
    for keyword in KEYWORDS:
        # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        pattern1 = rf"{keyword}\s+([\w\s\-\d\+]+)"
        matches1 = re.findall(pattern1, text_lower)
        for item in matches1:
            results.append((normalize_state(keyword), item.strip()))
        pattern2 = rf"([\w\s\-\d\+]+)\s+{keyword}"
        matches2 = re.findall(pattern2, text_lower)
        for item in matches2:
            results.append((normalize_state(keyword), item.strip()))

    if not results:
        return None
    return found_shop, results

async def extract_with_openai(text: str):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)"""
    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –∏ –≤—ã–¥–µ–ª–∏:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (–∏–∑: —Ö–∞–π–ø, —è–Ω—Ç–∞—Ä—å, –ø–æ–ª–∫–∞)\n"
        "2. –¢–æ–≤–∞—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–º–∞–ª–æ/–Ω–µ—Ç—É/–Ω–µ—Ç/–∑–∞–∫–æ–Ω—á–∏–ª—Å—è/–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)\n"
        "–í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"shop\": \"...\", \"items\": [[\"–º–∞–ª–æ\", \"–ø–∏–≤–æ\"], [\"–Ω–µ—Ç—É\", \"—Å–ø—Ä–∞–π—Ç\"]]}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text}\""
    )
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
        )
        raw = response.choices[0].message.content.strip()
        parsed = json.loads(raw)
        shop = parsed.get("shop")
        items = parsed.get("items", [])
        if shop and items:
            return shop, [(normalize_state(state), name) for state, name in items]
    except Exception as e:
        print(f"‚ùå OpenAI error: {e}")
    return None

@router.message(F.chat.id == GROUP_CHAT_ID)
async def handle_any_message(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ (–≥–¥–µ –º—ã —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É),
    –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ.
    """
    if message.message_thread_id != TOPIC_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞

    user_id = message.from_user.id
    text = message.text or ""
    recent_user_msgs[user_id].append(text)
    # –•—Ä–∞–Ω–∏–º –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(recent_user_msgs[user_id]) > 3:
        recent_user_msgs[user_id].pop(0)

    context_text = " ".join(recent_user_msgs[user_id])
    print(f"üì© –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è user {user_id}: {context_text}")

    parsed = extract_data(context_text)
    if not parsed:
        parsed = await extract_with_openai(context_text)
        print(f"ü§ñ OpenAI —Ä–∞—Å–ø–∞—Ä—Å–∏–ª: {parsed}")

    if not parsed:
        print("‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    shop, items = parsed
    for state, name in items:
        stats[shop][(name, state)] += 1
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {shop} -> {items}")

@router.message(F.text.startswith("/—Å—Ç–∞—Ç–∫–∞"))
async def send_statka(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    text = await format_stat()
    await message.reply(text)

def format_item(name, state, count):
    icon = STATE_COLORS.get(state, "")
    return f"{icon} <b>{name}</b> ‚Äî {state} ({count})"

async def format_stat():
    if not stats:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    lines = [f"üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> –Ω–∞ {datetime.now().strftime('%d.%m %H:%M')}\n"]
    for shop, items in stats.items():
        lines.append(f"<u>{shop.capitalize()}</u>:")
        for (name, state), count in items.most_common():
            lines.append(format_item(name, state, count))
        lines.append("")
    return "\n".join(lines)

@router.message(F.text == "/—Ç–æ–ø–∏–∫")
async def show_topic_id(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ–ø–∏–∫–∞, –≥–¥–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"""
    topic_id = message.message_thread_id
    print(f"–ö–æ–º–∞–Ω–¥–∞ /—Ç–æ–ø–∏–∫ –æ—Ç {message.from_user.id}, thread_id={topic_id}")
    if topic_id:
        await message.reply(f"ID —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞: {topic_id}")
    else:
        await message.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–æ–ø–∏–∫–µ.")

def setup_scheduler():
    scheduler.add_job(send_daily_stat, "cron", hour=0, minute=0)
    scheduler.start()

async def send_daily_stat():
    text = await format_stat()
    await bot.send_message(chat_id=GROUP_CHAT_ID, message_thread_id=TOPIC_ID, text=text)

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)
    print("üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    dp.include_router(router)
    setup_scheduler()
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞...")
    web.run_app(main())
