import asyncio
import os
import re
import json
from collections import defaultdict, Counter
from datetime import datetime

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()
router = Router()

# –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
SHOP_NAMES = ["—è–Ω—Ç–∞—Ä—å", "—Ö–∞–π–ø", "–ø–æ–ª–∫–∞"]

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    choosing_shop = State()
    writing_order = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
orders = defaultdict(list)  # {shop: ["–ø–æ–∑–∏—Ü–∏—è 1", "–ø–æ–∑–∏—Ü–∏—è 2"]}
position_counter = Counter()  # –°—á—ë—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
TOP_COUNTER_FILE = "top_counter.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(TOP_COUNTER_FILE):
    with open(TOP_COUNTER_FILE, "r", encoding="utf-8") as f:
        position_counter.update(json.load(f))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª
def save_counter():
    with open(TOP_COUNTER_FILE, "w", encoding="utf-8") as f:
        json.dump(position_counter, f, ensure_ascii=False)

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
def shop_keyboard():
    buttons = [[InlineKeyboardButton(text=shop.capitalize(), callback_data=f"shop_{shop}")] for shop in SHOP_NAMES]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞
@router.message(F.text == "/–∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    await state.set_state(OrderStates.choosing_shop)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=shop_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(F.data.startswith("shop_"))
async def shop_chosen(callback: CallbackQuery, state: FSMContext):
    shop = callback.data.split("_")[1]
    await state.update_data(shop=shop)
    await state.set_state(OrderStates.writing_order)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω: <b>{shop}</b>\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
@router.message(OrderStates.writing_order)
async def receive_order(message: Message, state: FSMContext):
    data = await state.get_data()
    shop = data.get("shop")
    text = message.text.replace(",", "\n")
    positions = [line.strip() for line in text.split("\n") if line.strip()]
    orders[shop].extend(positions)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
    position_counter.update(positions)
    save_counter()

    formatted = "\n".join(f"‚ñ™Ô∏è {p}" for p in positions)
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–ª—è <b>{shop}</b>:\n{formatted}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(chat_id=GROUP_CHAT_ID, text=f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è {shop}</b>:\n{formatted}")
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "/–≤—Å–µ_–∑–∞–∫–∞–∑—ã")
async def all_orders(message: Message):
    if not orders:
        await message.reply("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    msg = ["üì¶ <b>–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:</b>"]
    for shop, items in orders.items():
        msg.append(f"\n<b>{shop.capitalize()}:</b>")
        for item in items:
            msg.append(f"‚ñ™Ô∏è {item}")
    await message.reply("\n".join(msg))

# –¢–æ–ø –ø–æ–∑–∏—Ü–∏–π
@router.message(F.text == "/—Ç–æ–ø_–ø–æ–∑–∏—Ü–∏–∏")
async def top_positions(message: Message):
    if not position_counter:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    top = position_counter.most_common(10)
    result = ["üìà <b>–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b>"]
    for i, (item, count) in enumerate(top, 1):
        result.append(f"{i}. {item} ‚Äî <b>{count}</b> —Ä–∞–∑(–∞)")
    await message.reply("\n".join(result))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling...")
    asyncio.run(main())
